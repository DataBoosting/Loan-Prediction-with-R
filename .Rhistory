Calculation example:
```{r calcexample}
pi*pi
```
library(knitr)
knit('simple.Rmd')
\documentclass{article}
\begin{document}
<<nameofblock>>=
1+2
@
\end{document}
quit()
test <- read.csv("traffic_test_score_all_class.csv", header=TRUE)
library(rattle)
rattle()
CitationSum <- sum(test$score.1)
?sum
CitationSum <- sum(score.1, data=test)
sum(1:5)
sum(3)
sum(test$score.1)
cit <- sum(test$score.1)
war <- sum(test$score.2)
war
plot(cit,war)
plotbar(cit,war)
plot.biVar(cit,war)
cit <- median(test$score.1)
war <- median(test$score.2)
cit
war
test$cit <- median(test$score.1)
test$war <- median(test$score.2)
View(test)
cor(test$Race,test$score.1)
summary(test$Race,test$score.1)
table(test$Race, test$score.1)
table(test$Race, test$cit)
table(test$Gender, test$cit)
prop.table(test$Gender, test$cit)
prop.table(test$Race, test$cit)
table(test$Race, test$Violation.Type)
plot(density(test$score.1))
plot(density(test$score.2))
d <- density(test$score.1)
plot(d, main="Kernel Density of Citations Scores")
polygon(d, col="maroon", border="blue")
rug(test$score.1, col="brown")
install.packages("sm")
library(sm)
sm.density.compare(test$score.1, test$Race)
sm.density.compare(test$score.1, test$Race, main="Density of Race vs. Citations Scores")
sm.density.compare(test$score.1, test$Gender)
sm.density.compare(test$score.1, test$SubAgency.N)
sm.density.compare(test$Gender, test$score.1)
gender.f <- factor(test$Gender, levels= c(M,F,U),
labels = c("M", "F",
"U"))
sm.density.compare(test$score.1, test$Gender, xlab="Citations Scores")
title(main="Scores Distribution by Gender")
colfill<-c(2:(1+length(levels(gender.f))))
legend(locator(1), levels(gender.f), fill=colfill)
gender.f <- factor(test$Gender, levels= c("M","F","U"),
labels = c("M", "F",
"U"))
sm.density.compare(test$score.1, test$Gender, xlab="Citations Scores")
title(main="Scores Distribution by Gender")
colfill<-c(2:(1+length(levels(gender.f))))
legend(locator(1), levels(gender.f), fill=colfill)
sm.density.compare(test$score.1, test$Gender, xlab="Citations Scores")
title(main="Scores Distribution by Gender")
colfill<-c(2:(1+length(levels(gender.f))))
legend(locator(1), levels(test$Gender), fill=colfill)
quit()
traffic <- read.csv("trafficsinan.csv", header=TRUE)
traffic$fine <- as.factor(traffic$fine)
traffic$fine <- addNA(traffic$fine)
traffic$Month <- as.factor(traffic$Month)
traffic$X <- NULL
#Require packages
require(rpart)
require(ggplot2)
require(randomForest)
require(rattle)
require(rpart.plot)
require(RColorBrewer)
require(cvTools)
require(corrplot)
require(plyr)
require(GeneNet)
require(vcd)
require(scales)
require(ggmap)
require(Hmisc)
rattle()
print(crs$ada)
round(crs$ada$model$errs[crs$ada$iter,], 2)
cat('Variables actually used in tree construction:\n')
print(sort(names(listAdaVarsUsed(crs$ada))))
cat('\nFrequency of variables actually used:\n')
print(listAdaVarsUsed(crs$ada))
#Accuracy ~ 75.5%
cv <- matrix(c(202913, 51757, 81185, 206698), nrow=2)
performance(as.table(cv))
#Function for assessing binary classification accuracy
performance <- function(table, n=2){
if(!all(dim(table) == c(2,2)))
stop("Must be a 2 x 2 table")
tn = table[1,1]
fp = table[1,2]
fn = table[2,1]
tp = table[2,2]
sensitivity = tp/(tp+fn)
specificity = tn/(tn+fp)
ppp = tp/(tp+fp)
npp = tn/(tn+fn)
hitrate = (tp+tn)/(tp+tn+fp+fn)
result <- paste("Sensitivity = ", round(sensitivity, n) ,
"\nSpecificity = ", round(specificity, n),
"\nPositive Predictive Value = ", round(ppp, n),
"\nNegative Predictive Value = ", round(npp, n),
"\nAccuracy = ", round(hitrate, n), "\n", sep="")
cat(result)
}
print(crs$ada)
round(crs$ada$model$errs[crs$ada$iter,], 2)
cat('Variables actually used in tree construction:\n')
print(sort(names(listAdaVarsUsed(crs$ada))))
cat('\nFrequency of variables actually used:\n')
print(listAdaVarsUsed(crs$ada))
#Accuracy ~ 75.5%
cv <- matrix(c(202913, 51757, 81185, 206698), nrow=2)
performance(as.table(cv))
print(crs$ada)
round(crs$ada$model$errs[crs$ada$iter,], 2)
cat('Variables actually used in tree construction:\n')
print(sort(names(listAdaVarsUsed(crs$ada))))
cat('\nFrequency of variables actually used:\n')
print(listAdaVarsUsed(crs$ada))
#Accuracy ~ 75.5%
cv <- matrix(c(189727    , 47167, 94371, 211288), nrow=2)
performance(as.table(cv))
print(crs$ada)
round(crs$ada$model$errs[crs$ada$iter,], 2)
cat('Variables actually used in tree construction:\n')
print(sort(names(listAdaVarsUsed(crs$ada))))
cat('\nFrequency of variables actually used:\n')
print(listAdaVarsUsed(crs$ada))
#Accuracy ~ 75.5%
cv <- matrix(c(202526, 54138  , 81572, 204317), nrow=2)
performance(as.table(cv))
print(crs$ada)
round(crs$ada$model$errs[crs$ada$iter,], 2)
cat('Variables actually used in tree construction:\n')
print(sort(names(listAdaVarsUsed(crs$ada))))
cat('\nFrequency of variables actually used:\n')
print(listAdaVarsUsed(crs$ada))
#Accuracy ~ 75.5%
cv <- matrix(c(43404 , 11637  , 17533, 43689), nrow=2)
performance(as.table(cv))
print(crs$ada)
round(crs$ada$model$errs[crs$ada$iter,], 2)
cat('Variables actually used in tree construction:\n')
print(sort(names(listAdaVarsUsed(crs$ada))))
cat('\nFrequency of variables actually used:\n')
print(listAdaVarsUsed(crs$ada))
#Accuracy ~ 75.5%
cv <- matrix(c(43473 , 11070  , 17464, 44256), nrow=2)
performance(as.table(cv))
print(crs$ada)
round(crs$ada$model$errs[crs$ada$iter,], 2)
cat('Variables actually used in tree construction:\n')
print(sort(names(listAdaVarsUsed(crs$ada))))
cat('\nFrequency of variables actually used:\n')
print(listAdaVarsUsed(crs$ada))
#Accuracy ~ 75.5%
cv <- matrix(c(40567 , 10084     , 20370, 45242), nrow=2)
performance(as.table(cv))
print(crs$ada)
round(crs$ada$model$errs[crs$ada$iter,], 2)
cat('Variables actually used in tree construction:\n')
print(sort(names(listAdaVarsUsed(crs$ada))))
cat('\nFrequency of variables actually used:\n')
print(listAdaVarsUsed(crs$ada))
#Accuracy ~ 75.5%
cv <- matrix(c(43441    , 11482, 17501, 43837), nrow=2)
performance(as.table(cv))
print(crs$ada)
round(crs$ada$model$errs[crs$ada$iter,], 2)
cat('Variables actually used in tree construction:\n')
print(sort(names(listAdaVarsUsed(crs$ada))))
cat('\nFrequency of variables actually used:\n')
print(listAdaVarsUsed(crs$ada))
#Accuracy ~ 75.5%
cv <- matrix(c(43521,10987, 17421, 44332), nrow=2)
performance(as.table(cv))
print(crs$ada)
round(crs$ada$model$errs[crs$ada$iter,], 2)
cat('Variables actually used in tree construction:\n')
print(sort(names(listAdaVarsUsed(crs$ada))))
cat('\nFrequency of variables actually used:\n')
print(listAdaVarsUsed(crs$ada))
#Accuracy ~ 75.5%
cv <- matrix(c(40582,9986, 20360, 45333), nrow=2)
performance(as.table(cv))
print(crs$ada)
round(crs$ada$model$errs[crs$ada$iter,], 2)
cat('Variables actually used in tree construction:\n')
print(sort(names(listAdaVarsUsed(crs$ada))))
cat('\nFrequency of variables actually used:\n')
print(listAdaVarsUsed(crs$ada))
#Accuracy ~ 75.5%
cv <- matrix(c(40803   ,7765   , 20134, 47561), nrow=2)
performance(as.table(cv))
quit()
traffic <- read.csv("trafficsinan.csv", header=TRUE)
traffic$fine <- as.factor(traffic$fine)
traffic$fine <- addNA(traffic$fine)
traffic$Month <- as.factor(traffic$Month)
traffic$X <- NULL
#Require packages
require(rpart)
require(ggplot2)
require(randomForest)
require(rattle)
require(rpart.plot)
require(RColorBrewer)
require(cvTools)
require(corrplot)
require(plyr)
require(GeneNet)
require(vcd)
require(scales)
require(ggmap)
require(Hmisc)
rattle()
quit()
mydata <- data.frame("var1","var2","var3")
var1 <- c(1:10)
var2 <- c(A:J)
var2 <- c("A":"J")
var2 <- A:J
var2 <- c(A,B,C,D,E,F,G,H,I,J)
var2 <- c('A','B','C','D','E','F','G','H','I','J')
?sample
var3 <- sample.int(n, size = n, replace = FALSE, prob = NULL)
var3 <- sample(1:100, 3, replace=TRUE)
var3 <- sample(1:10, 3, replace=TRUE)
summary(iris)
iris$Sepal.Width < 2.5
mydata
summary(mydata)
mydata$X.var1.
mydata$X.var2.
quit()
traffic <- read.csv("trafficsinan.csv", header=TRUE)
traffic$fine <- as.factor(traffic$fine)
traffic$fine <- addNA(traffic$fine)
traffic$Month <- as.factor(traffic$Month)
traffic$X <- NULL
require(rpart)
require(ggplot2)
require(randomForest)
require(rattle)
require(rpart.plot)
require(RColorBrewer)
require(cvTools)
require(corrplot)
require(plyr)
require(GeneNet)
require(vcd)
require(scales)
require(ggmap)
require(Hmisc)
library(rattle)
rattle()
set.seed(500)
train <- sample(nrow(traffic), 0.7*nrow(traffic))
traffic.train <- traffic[train,]
traffic.validate <- traffic[-train,]
table(traffic.train$class)
table(traffic.validate$class)
library(rpart)
dtree <- rpart(Violation.Type ~ Charge+Weekend+Damage+DL.Region+Vehicle.Type.N+
Alcohol+Commercial.License+HAZMAT+Year+
Gender+Make+Belts+Work.Zone+Race+Arrest.Type+CiteCount+
SubAgency.N+Color.N+Month+Time.of.Day, data=traffic.train,method="class",
parms=list(split="information"))
dtree$cptable
plotcp(dtree)
dtree.pruned <- prune(dtree, cp=.01)
library(rpart.plot)
prp(dtree.pruned, type = 2, extra = 104,
fallen.leaves = TRUE, main="Decision Tree")
library(partykit)
plot(as.party(dtree.pruned))
dtree.pred <- predict(dtree.pruned, traffic.validate, type="class")
dtree.perf <- table(traffic.validate$Violation.Type, dtree.pred,
dnn=c("Actual", "Predicted"))
dtree.perf
crs$rpart $cptable
plotcp(dtree)
plotcp(crs$rpart)
print(crs$rpart)
cat("\n")
quit()
traffic <- read.csv("trafficsinan.csv", header=TRUE)
traffic$fine <- as.factor(traffic$fine)
traffic$fine <- addNA(traffic$fine)
traffic$Month <- as.factor(traffic$Month)
traffic$X <- NULL
#Require packages
require(rpart)
require(ggplot2)
require(randomForest)
require(rattle)
require(rpart.plot)
require(RColorBrewer)
require(cvTools)
require(corrplot)
require(plyr)
require(GeneNet)
require(vcd)
require(scales)
require(ggmap)
require(Hmisc)
rattle()
quit()
traffic <- read.csv("trafficsinan.csv", header=TRUE)
traffic$fine <- as.factor(traffic$fine)
traffic$fine <- addNA(traffic$fine)
traffic$Month <- as.factor(traffic$Month)
traffic$X <- NULL
#Require packages
require(rpart)
require(ggplot2)
require(randomForest)
require(rattle)
require(rpart.plot)
require(RColorBrewer)
require(cvTools)
require(corrplot)
require(plyr)
require(GeneNet)
require(vcd)
require(scales)
require(ggmap)
require(Hmisc)
rattle()
quit()
install.packages(c("DBI", "jsonlite", "mvtnorm", "party", "SparseM"))
quit()
install.packages("devtools")
library(devtools)
install.packages("shiny")
install_github("StatsWithR/statsr")
install_github("statsr")
install.packages("statsr")
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
fix(arbuthnot)
View(arbuthnot)
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
?ggplot
5218 + 4683
arbuthnot$boys + arbuthnot$girls
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
arbuthnot <- arbuthnot %>%
mutate(more_boys = boys > girls)
data(present)
total <- present$boys+present$girls
prop_boys <- present$boys/present$total
total$present <- present$boys+present$girls
q()
install.packages(c("assertthat", "backports", "car", "checkmate", "coin", "corpcor", "curl", "DBI", "devtools", "dplyr", "evaluate", "fields", "Formula", "gdata", "GGally", "Hmisc", "htmltools", "htmlwidgets", "httpuv", "igraph", "installr", "irlba", "jsonlite", "knitr", "lme4", "mapproj", "maps", "markdown", "mclust", "party", "pbkrtest", "plotly", "pROC", "purrr", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "rmarkdown", "rpart", "rpart.plot", "seriation", "sp", "spam", "SparseM", "stringi", "survival", "tibble", "tidyr", "VIM", "viridis", "XML", "zoo"))
q()
install.packages(c("coin", "cubature", "curl", "devtools", "dplyr", "GGally", "git2r", "igraph", "plotly", "purrr", "sandwich", "withr"))
install.packages(c("dplyr", "plotly"))
q()
install.packages('dplyr')
install.packages("dplyr")
install.packages(c("arules", "arulesViz", "BH", "dplyr", "gridExtra", "httr", "multcomp", "openssl", "psych", "rattle", "RcppArmadillo", "rstudioapi", "scales", "shiny", "tibble", "tidyr", "tidyselect"))
install.packages("dplyr")
setwd("C:/Users/USER/Desktop/Coaching/Projects/Loan Prediction")
getwd()
getwd()
getwd()
?knit
getwd()
getwd(
)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/USER/Desktop/Coaching/Projects/Loan Prediction")
tr <- read.csv('train.csv', header = TRUE)
head(tr)
summary(tr)
setwd("C:/Users/USER/Desktop/Coaching/Projects/Loan Prediction")
tr <- read.csv(file="train.csv", na.strings=c("", "NA"), header=TRUE)
library(plyr)
tr$Dependents <- revalue(tr$Dependents, c("3+"="3"))
sapply(tr, function(x) sum(is.na(x)))
library(mice)
library(VIM)
mice_plot <- aggr(tr, col=c('navyblue','red'),
numbers=TRUE, sortVars=TRUE,
labels=names(tr), cex.axis=.7,
gap=3, ylab=c("Missing data","Pattern"))
par(mfrow=c(2,2))
hist(tr$LoanAmount,
main="Histogram for LoanAmount",
xlab="Loan Amount",
border="blue",
col="maroon",
las=1,
breaks=20, prob = TRUE)
boxplot(tr$LoanAmount, col='maroon',xlab = 'LoanAmount', main = 'Box Plot for Loan Amount')
hist(tr$ApplicantIncome,
main="Histogram for Applicant Income",
xlab="Income",
border="blue",
col="maroon",
las=1,
breaks=50, prob = TRUE)
#lines(density(tr$ApplicantIncome), col='black', lwd=3)
boxplot(tr$ApplicantIncome, col='maroon',xlab = 'ApplicantIncome', main = 'Box Plot for Applicant Income')
dev.off()
library(ggplot2)
data(tr, package="lattice")
ggplot(data=tr, aes(x=LoanAmount, fill=Education)) +
geom_density() +
facet_grid(Education~.)
par(mfrow=c(2,3))
counts <- table(tr$Loan_Status, tr$Gender)
barplot(counts, main="Loan Status by Gender",
xlab="Gender", col=c("darkgrey","maroon"),
legend = rownames(counts))
counts2 <- table(tr$Loan_Status, tr$Education)
barplot(counts2, main="Loan Status by Education",
xlab="Education", col=c("darkgrey","maroon"),
legend = rownames(counts2))
counts3 <- table(tr$Loan_Status, tr$Married)
barplot(counts3, main="Loan Status by Married",
xlab="Married", col=c("darkgrey","maroon"),
legend = rownames(counts3))
counts4 <- table(tr$Loan_Status, tr$Self_Employed)
barplot(counts4, main="Loan Status by Self Employed",
xlab="Self_Employed", col=c("darkgrey","maroon"),
legend = rownames(counts4))
counts5 <- table(tr$Loan_Status, tr$Property_Area)
barplot(counts5, main="Loan Status by Property_Area",
xlab="Property_Area", col=c("darkgrey","maroon"),
legend = rownames(counts5))
counts6 <- table(tr$Loan_Status, tr$Credit_History)
barplot(counts6, main="Loan Status by Credit_History",
xlab="Credit_History", col=c("darkgrey","maroon"),
legend = rownames(counts5))
dev.off()
imputed_Data <- mice(tr, m=2, maxit = 2, method = 'cart', seed = 500)
tr <- complete(imputed_Data,2) #here I chose the second round of data imputation
sapply(tr, function(x) sum(is.na(x)))
tr$LogLoanAmount <- log(tr$LoanAmount)
par(mfrow=c(1,2))
hist(tr$LogLoanAmount,
main="Histogram for Loan Amount",
xlab="Loan Amount",
border="blue",
col="maroon",
las=1,
breaks=20, prob = TRUE)
lines(density(tr$LogLoanAmount), col='black', lwd=3)
boxplot(tr$LogLoanAmount, col='maroon',xlab = 'Income', main = 'Box Plot for Applicant Income')
dev.off()
tr$Income <- tr$ApplicantIncome + tr$CoapplicantIncome
tr$ApplicantIncome <- NULL
tr$CoapplicantIncome <- NULL
tr$LogIncome <- log(tr$Income)
par(mfrow=c(1,2))
hist(tr$LogIncome,
main="Histogram for Applicant Income",
xlab="Income",
border="blue",
col="maroon",
las=1,
breaks=50, prob = TRUE)
lines(density(tr$LogIncome), col='black', lwd=3)
boxplot(tr$LogIncome, col='maroon',xlab = 'Income', main = 'Box Plot for Applicant Income')
dev.off()
set.seed(42)
sample <- sample.int(n = nrow(tr), size = floor(.70*nrow(tr)), replace = F)
trainnew <- tr[sample, ]
testnew  <- tr[-sample, ]
#setwd("C:/Users/USER/Desktop/Coaching/Projects/Loan Prediction")
Logistic1 <- glm (Loan_Status ~ Credit_History,data = trainnew, family = binomial)
summary(logistic1)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
q()
